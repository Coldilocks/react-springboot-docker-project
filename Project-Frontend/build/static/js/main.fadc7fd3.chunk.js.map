{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","updateToggle","setState","prevState","studentId","name","department","major","updateModal","addToggle","addModal","addStudentWithAxios","e","preventDefault","state","axios","post","then","res","status","alert","getStudentsWithAxios","get","students","data","console","log","updateStudentWithAxios","put","deleteStudent","student","window","confirm","fetch","method","headers","body","JSON","stringify","this","updateFormCloseBtn","className","onClick","addFormCloseBtn","Container","Row","Col","style","margin","Table","responsive","hover","map","key","scope","width","Button","color","float","marginRight","Modal","isOpen","toggle","ModalHeader","close","ModalBody","Form","onSubmit","FormGroup","Label","for","Input","type","id","value","onChange","target","readOnly","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fadc7fd3.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {Container, Row, Col, ModalHeader, ModalBody, Modal, FormGroup, Label, Input, Form} from 'reactstrap'\nimport { Table, Button } from 'reactstrap';\nimport axios from 'axios'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      studentId:'',\n      name:'',\n      department:'',\n      major:'',\n      students: [],\n      updateModal: false,\n      addModal: false\n    }\n  }\n\n  updateToggle = () => {\n    this.setState(prevState => ({\n      studentId:'',\n      name:'',\n      department:'',\n      major:'',\n      updateModal: !prevState.updateModal\n    }))\n  }\n\n  addToggle = () => {\n    this.setState(prevState => ({\n      studentId:'',\n      name:'',\n      department:'',\n      major:'',\n      addModal: !prevState.addModal\n    }))\n  }\n\n  componentDidMount(){\n    this.getStudentsWithAxios()\n  }\n\n  render() {\n\n    const updateFormCloseBtn = <button className=\"close\" onClick={this.updateToggle}>&times;</button>\n    const addFormCloseBtn = <button className=\"close\" onClick={this.addToggle}>&times;</button>\n\n    return (\n        <Container className=\"App\">\n          <Row>\n            <Col>\n              <h1 style={{margin: \"20px 0\"}}>学生信息</h1>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Table responsive hover>\n                <thead>\n                <tr>\n                  <th>学号 Student ID</th>\n                  <th>姓名 Name</th>\n                  <th>院系 Department</th>\n                  <th>专业 Major</th>\n                  <th>操作 Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  this.state.students.map(student => {\n                    return (\n                        <tr key={student.studentId}>\n                          <th scope=\"row\">{student.studentId}</th>\n                          <td>{student.name}</td>\n                          <td>{student.department}</td>\n                          <td>{student.major}</td>\n                          <td>\n                            <div style={{width:\"110px\"}}>\n                              <Button color=\"primary\" onClick={(prevState)=>{this.setState({studentId:student.studentId,name:student.name, department:student.department, major:student.major, updateModal:!prevState.updateModal}); }} style={{float: \"left\", marginRight:\"10px\"}}>\n                                修改\n                              </Button>\n                              <Modal isOpen={this.state.updateModal} toggle={this.updateToggle} className={this.props.className}>\n                                <ModalHeader toggle={this.updateToggle} close={updateFormCloseBtn}>修改学生信息</ModalHeader>\n                                <ModalBody>\n                                  <Form onSubmit={this.updateStudentWithAxios}>\n                                    <FormGroup>\n                                      <Label for=\"studentId\">学号 Student ID</Label>\n                                      <Input type=\"text\" id=\"studentId\" value={this.state.studentId} onChange={(e)=>{this.setState({studentId:e.target.value})}} readOnly/>\n                                    </FormGroup>\n                                    <FormGroup>\n                                      <Label for=\"name\">姓名 Name</Label>\n                                      <Input type=\"text\" name=\"name\" id=\"name\" value={this.state.name} onChange={(e)=>{this.setState({name:e.target.value})}} />\n                                    </FormGroup>\n                                    <FormGroup>\n                                      <Label for=\"department\">学院 Department</Label>\n                                      <Input type=\"text\" name=\"department\" id=\"department\" value={this.state.department} onChange={(e)=>{this.setState({department:e.target.value})}} />\n                                    </FormGroup>\n                                    <FormGroup>\n                                      <Label for=\"major\">专业 Major</Label>\n                                      <Input type=\"text\" name=\"major\" id=\"major\" value={this.state.major} onChange={(e)=>{this.setState({major:e.target.value})}}  />\n                                    </FormGroup>\n                                    <Button color=\"primary\">提交</Button>\n                                  </Form>\n                                </ModalBody>\n                              </Modal>\n                              {' '}\n                              <Button color=\"danger\" onClick={() => this.deleteStudent(student)}>删除</Button>\n                            </div>\n                          </td>\n                        </tr>\n                    )\n                  })\n                }\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button color=\"success\" onClick={this.addToggle} style={{float: \"left\", marginRight:\"10px\"}}>\n                添加\n              </Button>\n              <Modal isOpen={this.state.addModal} toggle={this.addToggle} className={this.props.className}>\n                <ModalHeader toggle={this.addToggle} close={addFormCloseBtn}>添加学生信息</ModalHeader>\n                <ModalBody>\n                  <Form onSubmit={this.addStudentWithAxios}>\n                    <FormGroup>\n                      <Label for=\"studentId\">学号 Student ID</Label>\n                      <Input type=\"text\" id=\"studentId\" value={this.state.studentId} onChange={(e)=>{this.setState({studentId:e.target.value})}}/>\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"name\">姓名 Name</Label>\n                      <Input type=\"text\" name=\"name\" id=\"name\" value={this.state.name} onChange={(e)=>{this.setState({name:e.target.value})}} />\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"department\">学院 Department</Label>\n                      <Input type=\"text\" name=\"department\" id=\"department\" value={this.state.department} onChange={(e)=>{this.setState({department:e.target.value})}} />\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"major\">专业 Major</Label>\n                      <Input type=\"text\" name=\"major\" id=\"major\" value={this.state.major} onChange={(e)=>{this.setState({major:e.target.value})}}  />\n                    </FormGroup>\n                    <Button color=\"success\">提交</Button>\n                  </Form>\n                </ModalBody>\n              </Modal>\n            </Col>\n          </Row>\n        </Container>\n    )\n  }\n\n  /**\n   * 添加学生信息\n   * @param e\n   */\n  addStudentWithAxios = (e) => {\n    e.preventDefault();\n    if(this.state.studentId !== ''){\n      axios.post(\n          '/api/v1/student',\n          {\n            studentId:!this.state.studentId ? '': this.state.studentId,\n            name:this.state.name,\n            department:this.state.department,\n            major:this.state.major\n          })\n          .then((res)=>{\n            this.setState({\n              studentId:'',\n              name:'',\n              department:'',\n              major:''\n            });\n            if(res.status === 201) {\n              alert('添加成功!')\n            }\n            this.addToggle(); //隐藏表单\n            this.getStudentsWithAxios();\n\n          })\n    }\n  }\n\n  /**\n   * 获取所有学生信息\n   */\n  // getStudentsWithAxios = () => {\n  //   axios.get('/api/v1/student').then(({data})=>{\n  //     this.setState({students : data});\n  //     console.log(data)\n  //   })\n  // }\n  getStudentsWithAxios = () => {\n    axios.get('/api/v1/student').then((res)=>{\n      if(res.status === 200){\n          this.setState({students : res.data});\n      }\n      console.log(res)\n    })\n  }\n\n\n  /**\n   * 更新学生信息\n   * @param e\n   */\n  updateStudentWithAxios = (e) => {\n    e.preventDefault();\n    if(this.state.studentId !== ''){\n      axios.put(\n          '/api/v1/student',\n          {\n            studentId:!this.state.studentId ? '': this.state.studentId,\n            name:this.state.name,\n            department:this.state.department,\n            major:this.state.major\n          })\n          .then((res)=>{\n            this.setState({\n              studentId:'',\n              name:'',\n              department:'',\n              major:''\n            });\n            if(res.status === 200){\n              alert('更新成功!')\n            } else if (res.status === 404){\n              alert('未找到此学号')\n            }\n            this.updateToggle();  //隐藏表单\n            this.getStudentsWithAxios();\n\n          })\n    }\n  }\n\n  /**\n   * 删除学生信息\n   * @param student\n   */\n  deleteStudent = (student) => {\n    let confirmDelete = window.confirm('确认删除吗?')\n    if(confirmDelete){\n      fetch(`/api/v1/student`, {\n        method: 'delete',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n          studentId:student.studentId,\n        })\n      }).then((res)=>{\n        // console.log(res.data);\n        if(res.status === 200){\n          alert('删除成功!')\n        }\n        this.getStudentsWithAxios();\n      })\n    }\n  }\n\n  // deleteStudentWithAxios = (student) => {\n  //   let confirmDelete = window.confirm('确认删除吗?')\n  //   if(confirmDelete){\n  //     axios.delete(`/api/v1/student/${student.studentId}`).then((res)=>{\n  //       console.log(res.data);\n  //       if(res.status === 200){\n  //         alert('删除成功!')\n  //       }\n  //       this.getStudentsWithAxios();\n  //     })\n  //   }\n  // }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}